(load "sudoku-cl.ros")
(ql:quickload :fiveam)

(defpackage #:sudoku-cl-test
  (:use #:cl #:fiveam #:sudoku-cl))

(in-package #:sudoku-cl-test)

(def-suite sudoku-tests
  :description "Tests for the Sudoku solver.")

(in-suite sudoku-tests)

(test is-valid-test
  (let ((grid (make-array '(9 9) :initial-contents
    '((5 3 0 0 7 0 0 0 0)
      (6 0 0 1 9 5 0 0 0)
      (0 9 8 0 0 0 0 6 0)
      (8 0 0 0 6 0 0 0 3)
      (4 0 0 8 0 3 0 0 1)
      (7 0 0 0 2 0 0 0 6)
      (0 6 0 0 0 0 2 8 0)
      (0 0 0 4 1 9 0 0 5)
      (0 0 0 0 8 0 0 7 9)) :element-type '(unsigned-byte 4))))
    (is (not (is-valid grid 0 2 5)))
    (is (is-valid grid 0 2 1))))

(test solve-test
  (let ((grid (make-array '(9 9) :initial-contents
    '((5 3 0 0 7 0 0 0 0)
      (6 0 0 1 9 5 0 0 0)
      (0 9 8 0 0 0 0 6 0)
      (8 0 0 0 6 0 0 0 3)
      (4 0 0 8 0 3 0 0 1)
      (7 0 0 0 2 0 0 0 6)
      (0 6 0 0 0 0 2 8 0)
      (0 0 0 4 1 9 0 0 5)
      (0 0 0 0 8 0 0 7 9)) :element-type '(unsigned-byte 4))))
    (solve grid)
    (is (equalp grid
          (make-array '(9 9) :initial-contents
'((5 3 4 6 7 8 9 1 2)
  (6 7 2 1 9 5 3 4 8)
  (1 9 8 3 4 2 5 6 7)
  (8 5 9 7 6 1 4 2 3)
  (4 2 6 8 5 3 7 9 1)
  (7 1 3 9 2 4 8 5 6)
  (9 6 1 5 3 7 2 8 4)
  (2 8 7 4 1 9 6 3 5)
  (3 4 5 2 8 6 1 7 9)) :element-type '(unsigned-byte 4))))))

(defun run-tests ()
  (run! 'sudoku-tests))

(run-tests)